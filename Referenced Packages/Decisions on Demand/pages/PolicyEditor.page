<!-- 
 Copyright 2012-2014, Decisions on Demand, Inc.
 All Rights Reserved.
 -->
<apex:page standardController="DecsOnD__Policy__c" extensions="DecsOnD.PolicyControllerExtension"  sidebar="false" showHeader="true" id="thePage"> 
	<head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" ></script> 
<!--
       <script src="{!URLFOR($Resource.JS_JQuery, 'jquery-1.9.1.js')}"></script>
 -->
		<script type="text/javascript" language="javascript" src="{!URLFOR($Resource.JS_FixedHeader, 'FixedHeader.js')}"></script>
	    <style>
	    	.textBold{ 
	    		font-weight:bold;
	    	}
	    	.pGridCol1{
	    	   text-align : left;
	    	   padding-bottom : 10px;
            }
            .pGridCol2{
            	text-align : right;
	    	    padding-bottom : 10px;
            }
	    	.detailList td.pGridColBottom1{
                width:30%;
                vertical-align:middle;
            }
            .detailList td.pGridColBottom2{
                width:23%;
                text-align:right;
                vertical-align:middle;
            }
            .detailList td.pGridColBottom3 {
                width:47%;
                text-align:left;
                vertical-align:middle;
            }
            .mbutton{
                width : 70px;
            }
            .buttonLocation{
                text-align:center;
                padding-bottom:10px;
                padding-top:10px;
            }
            
			.Popup{
			    position: absolute;
			    z-index: 99999;
			}
			
			.InnerPopup{
			    margin: auto;
			    min-width: 380px;
			    min-height: 200px;
			    background-color: #fff;
			    -moz-border-radius-topright: 4px;
			    border-top-right-radius: 4px;
			    -moz-border-radius-topleft: 4px;
			    border-top-left-radius: 4px;
			    -moz-border-radius-bottomright: 4px;
			    border-bottom-right-radius: 4px;
			    -moz-border-radius-bottomleft: 4px;
			    border-bottom-left-radius: 4px;
			    border: 1px solid #75b2dd;
			}
			
			.PopUpTitle{
				background-color: rgba(0, 120, 204, 0.38); 
				padding-left: 10px; 
				padding-top:5px;
				padding-bottom:5px; 
				font-weight: bold; 
				font-family:Arial,Helvetica,sans-serif;
			}
			
			.colorbox{
                padding: 2px 4px;
                font-weight: bold;
                position: absolute;
                top: 300px;
                left: 450px;
                z-index:100000;
            }
	    </style>
	    
	    <script type="text/javascript">
	    	
	    	function createFixedHeader(){
	    		// TODO Use $Component if possible to avoid hard-coding entire path
            	var theTable = document.getElementById('thePage:PolicyDisplayForm:VersionBlock:VersionList:VersionSectionItem:VersionTable');
                new FixedHeader(theTable);
                var divFixedHeader = document.getElementById('theFixedHeader');
                var tablePbs = document.getElementById('thePage:PolicyDisplayForm:VersionBlock:VersionList');
                tablePbs.appendChild(divFixedHeader);
            }
            
	        function changeActiveVersion(versionNum) {
	       		setActiveVersion(versionNum);
	        }
	    	
		    function showPopUp_NoBG(msg, ele, configX, configY) {
		    	//if($("#PopUp").is(':visible')) return ClosePopUp();
		    	//$("#PopUp").fadeIn('slow');
 	    		$("#PopUp").show('fast');
	        	$("#PopUpBody")[0].innerHTML = msg;
	        	$("#PopUp").offset({top: findPositionY(ele) + configY,left: findPositionX(ele) - configX});
		    };
		
			
		    function closePopUp() {
		        //$("#PopUp").fadeOut('slow');
		        $("#PopUp").hide('fast');
		    };
		    
		    function findPositionX(obj)
			{
			    var left = 0;
			    if(obj.offsetParent)
			    {
			        while(1) 
			        {
			          left += obj.offsetLeft;
			          if(!obj.offsetParent)
			            break;
			          obj = obj.offsetParent;
			        }
			    }
			    else if(obj.x)
			    {
			        left += obj.x;
			    }
			    return left;
			}

			function findPositionY(obj)
			{
			    var top = 0;
			    if(obj.offsetParent)
			    {
			        while(1)
			        {
			          top += obj.offsetTop;
			          if(!obj.offsetParent)
			            break;
			          obj = obj.offsetParent;
			        }
			    }
			    else if(obj.y)
			    {
			        top += obj.y;
			    }
			    return top;
			  }
			  
			  
			function closeConfirmDialog(){
            	document.getElementById('overlayBackgroundConfirm').style.display='none';
            	document.getElementById('confirmDialog').style.display='none';
        	}
        
	        function openConfirmDialog(ele, configX, configY, isDelPol){
	            //set the confirm dialog title
	            var title = document.getElementById('confirmDialogTitle');
	            if (title) title.innerHTML = (isDelPol) ? 'Delete Policy : {!Policy__c.name}' : 'Delete draft version';
	            //set the comfirm message of the dialog
	            if(!isDelPol){
	            	var confirmMsgDiv = document.getElementById("divConfirmMsg");
	            	if (confirmMsgDiv) confirmMsgDiv.innerHTML = 'Are you sure you want to delete this draft version?';
	            }
	            //set "Yes" button action
	            var btnYes = document.getElementById("btnYes");
	            btnYes.onclick = function(){
	            	closeConfirmDialog();
	            	if(isDelPol){
	            		var btnDeletPol = document.getElementById("thePage:PolicyDisplayForm:pbinvokesetup:btnDeletePolicy");
	            		if (btnDeletPol) {
	            			 btnDeletPol.value = "Deleting";
	            			 btnDeletPol.disabled = true;
	            			 btnDeletPol.className = "btnDisabled";
	            		}
	            		doDeletePolicy();
	            	} else 
	            		deleteDraftvVer();
	            };
	            //show the overlay background
	            var divOverLay = document.getElementById('overlayBackgroundConfirm');
	            if (divOverLay)divOverLay.style.display = 'block';
	            //show the confirm dialog
	            var divObj = document.getElementById('confirmDialog');
	            if (divObj)divObj.style.display = 'block';
	            //set the dialog position
	            $("#confirmDialog").offset({top: findPositionY(ele) + configY,left: configX});
	        }
        	
        	
        	/**
	 		 * Deleting policy
	 		 */
        	function doDeletePolicy(){
        		deletePolicy();
        	}
        	
        	/**
	 		 * Deleting draft version
	 		 */
        	function deleteDraftvVer(){
       			deleteDraftVersion();
        	}
        	
        	/**
	 		 * Function for refreshing the version history table to fix fixed header
	 		 */
        	function refreshVerBlock(){
        		reRenderVerBlock();
        	}
        	
        	function refreshPage(){
        		reloadPage();
        	}
        	
        	/**
	 		 * Disable execute log if Event set to inactive
	 		 */
        	function disableChildBox(boxParent, boxChild, logLevel){
        		if(boxParent == null || boxChild == null) return;
        		if(boxParent.checked && logLevel != '') boxChild.disabled = false;
        		else boxChild.disabled = true;
        	}
        	
        	 
        	function getElementSpinnerMessage(){
        	 	return document.getElementById(getPolicyContentViewerElementId()+':spinnerMessage');
        	}
        	function getPolicyContentViewerElementId(){
        		return "thePage:PolicyDisplayForm:PolicyContentViewerBlock:pbsPolicyContentViewer";
        	}
        	 
        	/**
		     * Function for hiding loading spinner
		     */
		    function hideLoadingSpinner(isHide){
		     	removeFixedHeader();
		     	var divLoading = document.getElementById(getPolicyContentViewerElementId()+':divLoading');
           	    var divPolContent = document.getElementById(getPolicyContentViewerElementId()+':divPolContent');
				if (divLoading) divLoading.style.display = (isHide) ? "none" : "block";
				if (divPolContent) divPolContent.style.display = (isHide) ? "block" : "none";
				refreshVerBlock(); 
		     }
		     
		     /**
		      * Function for removing fixed header
		      */
		     function removeFixedHeader(){
		     	 var fixedHeader = document.getElementById('theFixedHeader');
	        	 if (fixedHeader)fixedHeader.parentNode.removeChild(fixedHeader);
		     }
		     
		     /**
		      * Function for disable "Edit Policy" button
		      */
		     function disableBtnEditPolicy(){
		        var btnEditPolicy = document.getElementById(getPolicyContentViewerElementId()+':btnEditPolicy');
		        btnEditPolicy.disabled = true;
		        btnEditPolicy.className = 'btnDisabled';
		     }
           	 
		    $(function() {
//		        console.log("parent onLoad called: " + Date.now());
        	});
	        
		</script>
    </head>
    
    <!-- Form is required since there are input checkboxes in the list -->
	<apex:form id="PolicyDisplayForm">
		
		<!-- @Vichet 141008: refresh "Edit Policy" button in every 5 minute -->
		<apex:actionPoller interval="300" reRender="pnLockWarnMsg,pngEditPolicy,pngVersion,VersionBlock" /> 
		<apex:actionFunction name="refreshPolicyLockedWarnMsg" reRender="pnLockWarnMsg,pngEditPolicy,pngVersion,VersionBlock"/>
		<apex:actionFunction name="reloadPage" action="{!refreshVersions}" reRender="pnLockWarnMsg, pngVersion, pngEditPolicy, VersionBlock, pbinvokesetup, thePEMsg"/><!-- specific block for render after  refresh page -->
		<apex:actionFunction name="reRenderVerBlock" reRender="VersionBlock"/>
		<apex:actionFunction name="deletePolicy" action="{!deletePolicy}" oncomplete="top.location.href='/apex/DecsOnD__PolicyBrowser'"/> 
		<apex:actionFunction name="deleteDraftVersion" action="{!deleteDraftVersion}" rerender="PolicyContentViewerBlock, pnBtnEditPolicy, VersionBlock, thePEMsg" status="deleteDraftStatus"/>
		<apex:actionFunction name="setActiveVersion" action="{!setActiveVersion}" rerender="pngVersion, pnBtnEditPolicy, VersionBlock, thePEMsg" > 
	        <apex:param name="firstParam" assignTo="{!activeVersion}" value="" />
	    </apex:actionFunction>
	    
	    <!-- Policy Content Viewer Block    -->
		<apex:pageBlock id="PolicyContentViewerBlock" rendered="{!canViewPolicy}" mode="edit"> 
			<apex:pageMessages showDetail="true" id="thePEMsg"/>
			<apex:outputPanel rendered="{!NOT(isValidPolicy)}">
            	<apex:pageMessage rendered="{!canDeletePolicy}" summary="This policy is in an invalid state. You may delete it, or contact your administrator to restore it on the server" severity="warning" strength="3"/>
            	<apex:pageMessage rendered="{!NOT(canDeletePolicy)}" summary="This policy is in an invalid state. Please contact your administrator to remove or restore it" severity="warning" strength="3"/>
            </apex:outputPanel>
            
            <apex:pageBlockSection id="pbsPolicyContentViewer" collapsible="false" columns="1" rendered="{!AND(isValidPolicy, NOT(ISBLANK(curLatestVers)))}">
				<apex:outputPanel rendered="{!NOT(isActivePolicy)}">
					<apex:pageMessage rendered="{!canUpdatePolicy}" summary="This policy has been archived. To invoke or edit it, please change the status back to Active" severity="info" strength="2"/>
					<apex:pageMessage rendered="{!NOT(canUpdatePolicy)}" summary="This policy has been archived. Please contact the owner of the policy or your administrator to restore it to Active state" severity="info" strength="2"/>
	            </apex:outputPanel>
	            
               <!-- @Sothea 141029 Showing policy locked warning message -->
			    <apex:outputPanel id="pnLockWarnMsg" layout="block">
			    	<apex:pageMessage id="theLockWarnMsg" rendered="{!isLockedByOther}" summary="This policy is currently locked by {!LockedByName}" severity="warning" strength="2"/>
			    	<apex:pageMessage id="theModifiedWarnMsg2" rendered="{!AND(NOT(isLockedByOther), isPolicyModifiedByOther)}" summary="This policy has been modified by {!ModifiedByName}. Please refresh it before making changes!" severity="warning" strength="2"/>
			    </apex:outputPanel>
			    
                <apex:panelGrid columns="2" border="0" width="100%" columnClasses="pGridCol1,pGridCol2" id="pngVersion">
                    <!-- Version drop-down -->
                    <apex:outputPanel layout="block" id="theVersionDropDownPanel"> 
	                    <apex:outputLabel value="Version"/>&nbsp;&nbsp;
	                    <apex:selectList id="version" value="{!selVersion}" size="1" style="width:300px">
	                        <apex:selectOptions value="{!versionSelectOptions}"/>
	                        <apex:actionSupport event="onchange"  rerender="PolicyContentViewerBlock,VersionBlock" status="theStatus" /> 
	                    </apex:selectList>
	                    <apex:actionStatus id="theStatus">
	                        <apex:facet name="start">   
	                        <apex:image url="/img/loading.gif"  /> 
	                        </apex:facet>
	                    </apex:actionStatus>
               		</apex:outputPanel> 
               		
               		<!-- Created on block -->
	                <apex:outputPanel layout="block" id="theVerInfoPanel">
	                	<apex:variable value="{!mapPolicyVersions[selVersion]}" var="selectedPolVer"/>	                	
	                	<apex:outputLabel value="Created on : "/>
	                	 <apex:outputText value="{!selectedPolVer.creationDateTime}"/>
	                	 <apex:outputLabel value=" by "/>
	                	<apex:outputText value="{!selectedPolVer.createdByName}" rendered="{!LEN(selectedPolVer.createdByURL)==0}" />
	                    <apex:outputLink value="{!selectedPolVer.createdByURL}" target="_blank" style="color:#0B7EF0;" rendered="{!LEN(selectedPolVer.createdByURL)!=0}">{!selectedPolVer.createdByName}</apex:outputLink>
	                    &nbsp;&nbsp;<apex:outputLink value="" target="_blank" style="color:#0B7EF0;" onclick="return false;" onmouseover="showPopUp_NoBG('{!selectedPolVer.notes}', this, 335, 30);" onmouseout="closePopUp();">(Notes)</apex:outputLink>
	                </apex:outputPanel>
	                
	                <!-- Buttons block -->
	                <apex:outputPanel id="pnButton">
	                	<apex:variable value="{!mapPolicyVersions[selVersion]}" var="selectedPolVer"/>
	                    <!-- Test button -->
	                    <apex:commandButton value="Test" onclick="top.location.href='/apex/PolicyVersionTestPanel?id={!DecsOnD__Policy__c.Id}&version={!selVersion}&callfrom=detail';return false;" styleClass="mbutton" disabled="{!NOT(isActivePolicy)}"/>&nbsp;
	                    
	                    <!-- Commit button -->
	                    <apex:commandButton value="Commit" onclick="top.location.href='/apex/PolicyContentEditorWizardPage?id={!DecsOnD__Policy__c.Id}&currentpage=3&callfrom=detail'; return false;" styleClass="mbutton" rendered="{!AND(canUpdatePolicy, selectedPolVer.draft)}" disabled="{!OR(isLockedByOther, isPolicyModifiedByOther, NOT(isActivePolicy))}"/>&nbsp;
	                    
	                    <!-- Activate button -->
	                    <apex:commandButton value="Activate" onclick="changeActiveVersion({!selectedPolVer.sequenceNum});return false;" styleClass="mbutton"  rendered="{!NOT(selectedPolVer.draft)}" disabled="{!NOT(AND(selectedPolVer.activeStateUpdateable, isActivePolicy, canSetActiveVersion))}"/>&nbsp;
	                	
	                	<!-- Delete draft version button  -->
	                	<apex:outputPanel id="pnDeleteDraftVersion" rendered="{!AND(canUpdatePolicy, totalVersion > 1, selectedPolVer.draft)}" > 
		     				<apex:actionStatus id="deleteDraftStatus">
			     				<apex:facet name="start">   
			                      	<apex:commandButton styleClass="mbutton" value="Deleting" disabled="true" />
			                     </apex:facet>
			                     <apex:facet name="stop">   
			                      	<apex:commandButton styleClass="mbutton" value="Delete" onClick="openConfirmDialog(this, 350, 30, false); return false;" disabled="{!OR(isLockedByOther, isPolicyModifiedByOther, NOT(isActivePolicy))}"/>
			                     </apex:facet>
		     				</apex:actionStatus> 
		          		</apex:outputPanel>
	                </apex:outputPanel> 
	                
	                <!-- Execution log level drop down  -->
					<apex:outputPanel layout="block" id="theExecutionLogLevelDropDown" style="float:right;"> 
						<apex:actionStatus id="theStatusLogLevel">
		                    <apex:facet name="start">   
		                    	 <apex:image url="/img/loading.gif"  /> 
		                	</apex:facet>
		                </apex:actionStatus>
		                
						<apex:outputLabel value="Default execution log level"/>&nbsp;&nbsp;
 						<apex:selectList value="{!DecsOnD__Policy__c.DecsOnD__Log_level__c}" rendered="{!OR(isLockedByOther, isPolicyModifiedByOther, NOT(isActivePolicy))}" disabled="true">
							<apex:selectOption itemValue="" itemLabel="--None--" rendered="{!ISBLANK(DecsOnD__Policy__c.DecsOnD__Log_level__c)}"/>
							<apex:selectOption itemValue="{!DecsOnD__Policy__c.DecsOnD__Log_level__c}" itemLabel="{!DecsOnD__Policy__c.DecsOnD__Log_level__c}" rendered="{!NOT(ISBLANK(DecsOnD__Policy__c.DecsOnD__Log_level__c))}"/>
						</apex:selectList>
						
						<apex:inputField id="inputLogLevel" value="{!DecsOnD__Policy__c.DecsOnD__Log_level__c}" rendered="{!AND(NOT(isLockedByOther), NOT(isPolicyModifiedByOther), isActivePolicy)}">
							<apex:actionSupport event="onchange" action="{!saveExecutionLogLevel}" rerender="theExecutionLogLevelDropDown, pbinvokesetup, thePEMsg, VersionBlock" status="theStatusLogLevel" />
	              		</apex:inputField> 
	              	</apex:outputPanel>
	              	
                </apex:panelGrid>
				<div id="PopUp" class="Popup" style="display:none;">
				    <div class="InnerPopup">
				    	<div class="PopUpTitle">
				    		Notes
						</div>
				        <p id="PopUpBody"></p>
				    </div>
				</div>
				
				<!-- Div for showing loading spinner -->
				<apex:outputPanel id="divLoading" layout="block" style="height:437px">
	                  <div id="divOverlay" style="width:100%; height:437px;text-align:center; background-color: #FFFFFF; opacity:0.6;filter:alpha(opacity=60);z-index:99999;"></div>
	                  <apex:panelGrid id="pngTextLoading" columns="2" styleclass="colorbox">
	                  	  <apex:image value="/img/loading.gif" title="Refreshing"/>
	                      <apex:outputtext id="spinnerMessage" value="Loading..." style="color: red;font-size:13px;"/>
	                  </apex:panelGrid>
			    </apex:outputPanel>
			    
			    
                <!-- Showing business policy content as table -->
                <apex:outputPanel id="divPolContent" layout="block" style="display:none;">
                	<!-- Display error or/and warn message(invalid policy configuration such as invalid lookup type warning message) -->
               		<apex:outputPanel id="divViewPolErrWarnMsg" layout="block" style="display:none;"></apex:outputPanel> 
                	<apex:iframe id="thePolContentViewer" src="/apex/PolicyContentViewer?id={!DecsOnD__Policy__c.Id}&version={!selVersion}&isEditable=false" height="492px" scrolling="false"/>
				</apex:outputPanel>
				
				
				<apex:panelGrid id="pngEditPolicy" columns="3" border="0" width="100%" style="vertical-align:middle;" columnClasses="pGridColBottom1,pGridColBottom2,pGridColBottom3" >
                	<apex:variable value="{!mapPolicyVersions[selVersion]}" var="selectedPolVer"/>
	                <apex:outputPanel id="pnBtnEditPolicy">
	                    <apex:commandButton id="btnEditPolicy" onclick="top.location.href='/apex/PolicyContentEditorWizardPage?id={!DecsOnD__Policy__c.Id}&version={!selVersion}&callfrom=wizard';return false;" value="Edit Policy" styleClass="mbutton" disabled="{!OR(isLockedByOther, isPolicyModifiedByOther, NOT(AND(selectedPolVer.isLast, isActivePolicy, canUpdatePolicy)))}"/>
	                    <!--  If policy is not active, there is already a more prominent warning above, no need to repeat here -->
	                </apex:outputPanel>
					<apex:outputPanel >
						<apex:outputText style="vertical-align:20;" value="Only the most recent policy version can be edited" rendered="{!AND(canUpdatePolicy, isActivePolicy, NOT(selectedPolVer.isLast))}" />
						<apex:outputText style="vertical-align:middle;" value="You do not have sufficient access rights to edit this policy" rendered="{!NOT(canUpdatePolicy)}" />
	                </apex:outputPanel>
                </apex:panelGrid>
                
                <!-- hidden loading -->
                <apex:outputPanel id="renderTimeout">
                	<script>
	                 	setTimeout(function(){hideLoadingSpinner(true);},20000);
	                </script>
                </apex:outputPanel>
                                
            </apex:pageBlockSection>
		</apex:pageBlock> 

		<!-- Version history page block -->
		<apex:pageBlock id="VersionBlock" rendered="{!canViewPolicy}" mode="edit">
		
		    <apex:variable var="curVerNum" value="{!DecsOnD__Policy__c.DecsOnD__Current_Version_Number__c}" />
		    
		    <apex:pageBlockSection title="Versions" columns="1" showHeader="false" id="VersionList" rendered="{!isValidPolicy}" > 
		        <h1>Version History</h1>
		        
		     	<!-- Version table -->
		        <apex:pageBlockSectionItem id="VersionSectionItem">
					<apex:outputPanel id="VersionPanel" layout="block" style="{!IF(totalVersion >= 5, 'overflow-y:scroll;height:141px;', '')}">
			            <apex:pageBlockTable value="{!versions}" var="vers" id="VersionTable">
			                <apex:column >
			                    <apex:facet name="header">Version</apex:facet> 
			                    <apex:outputText value="{!vers.sequenceNum}" rendered="{!NOT(vers.draft)}" styleClass="{!IF(vers.active, 'textBold', '')}"/>
			                    <apex:outputText value="[Draft]" rendered="{!vers.draft}"/>
			                    &nbsp;&nbsp;<apex:outputLink value="" target="_blank" style="color:#0B7EF0;" onclick="return false;" onmouseover="showPopUp_NoBG('{!vers.notes}', this, -60, -80);" onmouseout="closePopUp();">(Notes)</apex:outputLink>
	                
			                </apex:column>
			                <apex:column >
			                	<apex:facet name="header">Active</apex:facet>
			                    <apex:inputCheckbox value="{!vers.active}"  onchange="changeActiveVersion({!vers.sequenceNum})" disabled="{!NOT(AND(vers.activeStateUpdateable, canSetActiveVersion))}"/>
	<!--
	  		                    <apex:inputCheckbox value="{!vers.active}" disabled="{!NOT(canUpdateVersions)}">
			                         <apex:actionSupport event="onchange" action="{!modifyActiveVersion}" rerender="VersionTable"/>
			                    </apex:inputCheckbox>
	  -->
			                </apex:column>
			                <apex:column >
			                    <apex:facet name="header">Label</apex:facet>
			                    <apex:outputText value="{!vers.label}" styleClass="{!IF(vers.active, 'textBold', '')}" />
			                </apex:column> 
			                <apex:column >
			                	<apex:facet name="header">Source</apex:facet>
			                   <!--  <apex:outputLink value="{!vers.downloadURL}" target="_top" >Download</apex:outputLink>  -->
			                   <apex:commandLink action="{!downloadPolicy}" value="Download" id="cmdDownload" immediate="false" reRender="PolicyDisplayForm" styleClass="{!IF(vers.active, 'textBold', '')}">
			                       <apex:param name="TheVerNmu" value="{!vers.sequenceNum}" assignTo="{!versionNum}"/> 
			                  </apex:commandLink>
			                </apex:column>
			                <apex:column >
			                	<apex:facet name="header">Created</apex:facet>
			                    <apex:outputText value="{!vers.creationDateTime}" styleClass="{!IF(vers.active, 'textBold', '')}"/>
			                </apex:column>
			                <apex:column >
			                	<apex:facet name="header">Created by</apex:facet>  
			                		<apex:outputText value="{!vers.createdByName}" styleClass="{!IF(vers.active, 'textBold', '')}"  rendered="{!LEN(vers.createdByURL)==0}"/>
			                    	<apex:outputLink value="{!vers.createdByURL}" target="_blank" styleClass="{!IF(vers.active, 'textBold', '')}" rendered="{!LEN(vers.createdByURL)!=0}">{!vers.createdByName}</apex:outputLink>
			                </apex:column>
			                <apex:column >
			                	<apex:facet name="header">Last Updated</apex:facet>
			                    <apex:outputText value="{!vers.updateDateTime}" styleClass="{!IF(vers.active, 'textBold', '')}"/>
			                </apex:column>
			                <apex:column >
			                	<apex:facet name="header">Updated by</apex:facet>
			                	<apex:outputText value="{!vers.updatedByName}" styleClass="{!IF(vers.active, 'textBold', '')}"  rendered="{!LEN(vers.updatedByURL)==0}"/>
			                    <apex:outputLink value="{!vers.updatedByURL}" target="_blank" styleClass="{!IF(vers.active, 'textBold', '')}" rendered="{!LEN(vers.updatedByURL)!=0}">{!vers.updatedByName}</apex:outputLink>
			                </apex:column>
			            </apex:pageBlockTable>
		            </apex:outputPanel>
		        </apex:pageBlockSectionItem>
 		    </apex:pageBlockSection>
 		    <br/><br/>
 		    <script> createFixedHeader(); </script>
		</apex:pageBlock>
		
		<!-- Invoke Set up -->
		<apex:pageBlock id="pbinvokesetup" mode="edit">
			<apex:variable value="{!AND(isActivePolicy, canUpdateInvocationSetup)}" var="userEditable"/>
			<apex:variable value="thePage:PolicyDisplayForm:pbinvokesetup:pbsinvokesetup:compTriggerOpt" var="baseId"/>
			<apex:variable value="{!DecsOnD__Policy__c.DecsOnD__Log_level__c}" var="logLevel"/>
			
			<apex:pageBlockSection id="pbsinvokesetup" title="Versions" columns="1" showHeader="false"> 
		        <h1>Triggers</h1>
				<c:SettingTriggerOption policy="{!DecsOnD__Policy__c}" id="compTriggerOpt" parentId="{!baseId}" userEditable="{!userEditable}"/>
		    </apex:pageBlockSection>
		    
		    <apex:pageBlockSection id="pbsApplyInvokeSetting" columns="1">
			    <apex:outputPanel rendered="{!userEditable}">
        			<apex:actionStatus id="applyStatus">
        				<apex:facet name="start">   
	                        <apex:commandButton value="Applying" disabled="true"/>
                        </apex:facet>
                        <apex:facet name="stop">   
	                        <apex:commandButton value="Apply" action="{!saveInvokeSetup}" rerender="pbinvokesetup" status="applyStatus"/>
                        </apex:facet>
        			</apex:actionStatus>
		        </apex:outputPanel>
	        </apex:pageBlockSection>
	        
			<!-- Delete Policy button -->
	        <apex:outputPanel layout="block" rendered="{!canDeletePolicy}" styleClass="buttonLocation">
	        	<div style="height:5px;border-bottom:1px solid #E6E4E4;"></div>
		        
		        <apex:outputPanel id="pnBtnEDeletePolicy" layout="block" style="padding-top:8px;" rendered="{!NOT(isActivePolicy)}" >
               		<apex:variable var="pLeft" value="{!IF(isValidPolicy, -250, -50)}" />
               		<apex:commandButton id="btnDeletePolicy"  value="Delete policy" onclick="openConfirmDialog(this, 350, {!pLeft}, true); return false;" /> 
				</apex:outputPanel>
				
		        <apex:outputPanel layout="block" style="padding-top:8px;" rendered="{!isActivePolicy}">
	        		<apex:commandButton disabled="true" value="Delete policy"/>
	        		Active policies cannot be deleted, you must first change the status to Archived
		        </apex:outputPanel>
		        
		    </apex:outputPanel>
		    
		</apex:pageBlock>
	
	   <!-- Div for displaying pop-up window that allow user to confirm delete Policy  -->    
	   <div id="overlayBackgroundConfirm" class="overlayBackground" style="width:100%; height:100%;display: none;position: fixed;"></div>    
       <div id="confirmDialog" class="overlayDialog inlineEditDialog" style="width:400px;position:absolute; display: none; visibility: visible;">
            <div class="topRight" style="height:30px;">
                <div class="topLeft" style="height:20px;"> 
                    <img id="theCloseIcon" class="dialogClose" src="/s.gif" onclick="closeConfirmDialog();" onmouseout="this.className = 'dialogClose'" onmouseover="this.className = 'dialogCloseOn'"/>
                    <div id="confirmDialogTitle" style="font-weight:bold; font-size:13px;"></div>
                </div>
            </div>
            <div id="confirmDialogMiddle" class="middle" style="overflow:auto;height:100%;" >
                 <div id="confirmDialogBody" class="innerContent" >
                     <div id="confirmDialogContent" class="inlineEditCompoundDiv" align="center">     
                       	 <div id="divConfirmMsg">
	                       	 <div id="delPolicyMsgDiv" class="warningM4">
	       	  					 <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
		           					<tbody>
							          <tr valign="top">
							             <td> <img alt="warning" class="msgIcon" src="/s.gif" title="warning"/> </td>
							             <td class="messageCell">
							             	 <div id="theWarningMsg" class="messageText" style="margin-left: 8px">
							                 	Please note that deleting this policy will permanently remove all version history and execution records associated with it, even if the policy is subsequently restored on the server.<br/>
							                 </div>
							                 <div style="text-align:center;"> Are you sure you want to proceed? </div>
							              </td>
							           </tr>
							       	</tbody>
							     </table>
						      </div>
                       	 </div>
                       	 <div id="theBtnDiv" style="text-align:center;padding-top:10px;">
                       	 	<input id="btnYes" type="button" value="Yes" />&nbsp;&nbsp;
                       	 	<input id="btnNo" type="button" value="No" onclick="closeConfirmDialog();return false;" style="width:40px;"/>
                       	 </div>
                    </div>
                </div>  
            </div>
            <div class="bottomRight">
                <div class="bottomLeft"></div>
            </div>
       </div>
       
    </apex:form>
    
<!--	<apex:form id="PolicyUploadForm" rendered="{!AND(canUpdatePolicy, isActivePolicy)}">-->
<!--		<hr/>-->
<!--        <apex:pageBlock id="NewVersionBlock" >-->
<!--            <apex:pageBlockSection title="Upload new version header" columns="1" showHeader="false">-->
<!--                <h1>Upload new version</h1>-->
<!--                <apex:pageMessage summary="This policy cannot be updated because it is not active" severity="info" strength="2" escape="false" rendered="{!NOT(isActivePolicy)}"/>-->
<!--            </apex:pageBlockSection>-->
<!--            <apex:pageBlockSection title="Upload new version" columns="2" showHeader="false" collapsible="false" rendered="{!isActivePolicy}"> -->
<!--	             <apex:pageBlockSectionItem >-->
<!--	             	<apex:outputLabel value="Source file" for="SourceFile"/>-->
<!--	             	<apex:inputFile id="SourceFile" value="{!source.fileContent}" filename="{!source.fileName}" />-->
<!--	             </apex:pageBlockSectionItem>-->
<!--	             <apex:pageBlockSectionItem >-->
<!--	                  <apex:outputLabel value="Version label" for="VersionLabel"/>-->
<!--	                  <apex:inputText value="{!source.versionLabel}" id="VersionLabel" size="100"/>-->
<!--	             </apex:pageBlockSectionItem>-->
<!--	             <apex:selectRadio id="status" value="{!uploadVerStatus}" layout="pageDirection">-->
<!--				    <apex:selectOptions value="{!VersionStatues}" />             -->
<!--				</apex:selectRadio>-->
<!--				<br />  -->
<!--	            <apex:commandButton action="{!uploadNewVersion}" value="Upload" id="UploadButton"/>-->
<!--            </apex:pageBlockSection>-->
<!--        </apex:pageBlock>-->
<!--    </apex:form>-->
</apex:page>